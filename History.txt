=== 0.2.6
* Features:
  * Improved Vector#wrap
  * Performance improvements
  * Check for pkg-config, to avoid problems
  * Vector#median (bdigital)
  * Added Vector.linspace, Vector#hash, Matrix#set, Vector#eql?, Matrix#slide, Vector#quantile
  * Extend Array to include #to_v and #to_m (bdigital)
* Fixes:
  * Better plotter process closing
  * Clear C/CXXFLAGS
  * Pointer conversion bug causing random segfaults
  * Problem while trying to free GSL memory
=== 0.2.4.1
* Fixes:
  * Gnuplot not being correctly executed
  * plotting.cpp didn't compile on some systems
=== 0.2.4
* Features:
  * Plotting support (using gnuplot) (Plotter class and associated methods on Matrix).
  * Added Matrix#map_array (just like Vector#map_array)
  * C version of operator []
  * Support for some statistics operations in Vector
  * Updated documentation to use YARD's @group feature
* Internal Changes:
  * GSL memory is managed by FFI::AutoPointer now
* Fixes
  * On some systems, with Ruby 1.8 the extension was missing libstdc++ support
=== 0.2.3
* FIXES:
  * HUGE memory leak, no GSL object was ever freed.
  * Remove -march flag for MAC
* LOTS of improvements:
  * Added map_array: a map() version that actually returns an Array instead of a Vector/Matrix
  * Now you use the & idiom for map methods and such (like map_array(&:to_s))
  * Added Matrix#each_row / Matrix#each_column (which pass row and column matrices to the block)
  * Added Matrix#row_vecview / Matrix#column_vecview (construct a row and column Matrix::View)
  * Added Matrix#each_vec_row / Matrix#each_vec_column (same as the previous ones, but the block will receive a Vector::View instead)
  * Added x, y, z and w accessors for Vector (this will probably go into Vector2, Vector3 and Vector4 in the future)
  * "negate" operator
  * Documentation is now YARD based. This will significantly improve the documentation readability.
  * Added Vector#map_index! and Vector#wrap!
  * Initial support for Random Number Generators (only Uniform and Gaussian distributions for the moment)
  * Added Vector#<, #>, #<= and #>=
  * Added Matrix#map_with_index!
  * No more #fast_each and stuff. Now #each IS fast. This is accomplished by writing actual Ruby-C code instead of using FFI for
    these functions.
  * Initial support for GSL's special functions

=== 0.2.1
* Fixed for FFI 0.6.0

=== 0.2.0
* Completed Vector
* Added Matrix (mostly complete)
* Added Vector::View and Matrix::View

=== 0.1.0 / 2009-12-09

* Initial version
  * Only class Vector (but completely documented and implemented)

